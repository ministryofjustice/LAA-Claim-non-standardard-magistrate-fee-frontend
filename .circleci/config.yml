version: 2.1

orbs:
  ruby: circleci/ruby@2.0.1

# ------------------
# REFERENCES
# ------------------
references:
  _not_main: &not-main
    filters:
      branches:
        ignore: 
          - main
  
  _main-only: &main-only
      filters:
        branches:
          only: 
            - main

  _restore-bundle: &restore-bundle
    restore_cache:
      keys:
        - v1-bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        # fallback to using the latest cache if no exact match is found
        - v1-bundle-

  _install-bundle: &install-bundle
    run:
      name: Install gems
      command: |
        bundler_version=$(cat Gemfile.lock | tail -1 | tr -d " ")
        gem install bundler -v $bundler_version
        bundle config set path '~/vendor/bundle'
        bundle check || bundle install --jobs=4 --retry=3
        bundle clean --force

  _save-bundle: &save-bundle
    save_cache:
      key: v1-bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      paths:
        - ~/.bundle
        - ~/vendor/bundle

  _restore-assets: &restore-assets
    restore_cache:
      keys:
        - v4-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
        # fallback to using the latest asset cache if no exact match is found
        - v4-yarn-

  _install-assets: &install-assets
    run:
      name: Install and compile assets
      command: |
        RUBYOPT=-W:no-deprecated \
        yarn install && bin/rails dartsass:build

  _save-assets: &save-assets
    save_cache:
      key: v4-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
        - app/assets/builds

# ------------------
# COMMANDS
# ------------------  
commands:
  install-gems:
    steps:
      - *restore-bundle
      - *install-bundle
      - *save-bundle

  install-compile-assets:
    steps:
      - *restore-assets
      - *install-assets
      - *save-assets

  restore-dependencies:
    steps:
      - *restore-bundle
      - *restore-assets

  rubocop:
    steps:
      - run:
          name: Run rubocop
          command: bundle exec rubocop

  rspec:
    steps:
      - run:
          name: Run rspec tests
          command: |
            mkdir /tmp/test-results
            tmp/cc-test-reporter before-build
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
            RUBYOPT=-W:no-deprecated \
            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              $TESTFILES
            tmp/cc-test-reporter format-coverage -t simplecov -o "tmp/coverage/codeclimate.$CIRCLE_NODE_INDEX.json"
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  upload-coverage:
      steps:
        - run:
            name: Upload coverage results to Code Climate
            command: |
              tmp/cc-test-reporter sum-coverage --output - tmp/coverage/codeclimate.*.json | tmp/cc-test-reporter upload-coverage --input -

  install-codeclimate-tt:
      steps:
        - run:
            name: Install codeclimate test reporter
            command: |
              mkdir -p tmp/
              mkdir -p tmp/coverage/
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > tmp/cc-test-reporter
              chmod +x tmp/cc-test-reporter
        - persist_to_workspace:
            root: tmp
            paths:
              - cc-test-reporter
# ------------------
# JOBS
# ------------------      
jobs:
  build:
    docker:
      - image: cimg/ruby:3.2.2
    executor: ruby/default
    steps:
      - checkout
      - ruby/install-deps
  
  linter-tests:
    steps:
      - checkout
      - install-requirements
      - rubocop
  
  rspec-tests:
    steps:
      - checkout
      - install-requirements
      - rspec


# ------------------
# WORKFLOWS
# ------------------
workflows:
  test:
    jobs:
      - linter-tests
      - rspec-tests
  build-deploy-main:
    jobs:
      - build:
        <<: *main-only
  
  build-deploy-branch: 
    jobs: 
      - build:
        <<: *not-main