version: 2.1

orbs:
  ruby: circleci/ruby@2.0.1
  helm: circleci/helm@1.2.0
  browser-tools: circleci/browser-tools@1.1
  aws-cli: circleci/aws-cli@4.0.0
  aws-ecr: circleci/aws-ecr@8.2.1
  
# ------------------
# REFERENCES
# ------------------
references:
  _restore-bundle: &restore-bundle
    restore_cache:
      keys:
        - v1-bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        # fallback to using the latest cache if no exact match is found
        - v1-bundle-

  _install-bundle: &install-bundle
    run:
      name: Install gems
      command: |
        bundler_version=$(cat Gemfile.lock | tail -1 | tr -d " ")
        gem install bundler -v $bundler_version
        bundle config set path 'vendor/bundle'
        bundle check || bundle install --jobs=4 --retry=3
        bundle clean --force
        ls vendor/bundle/ruby/3.2.0/bin
        ls vendor/bundle/ruby/

  _save-bundle: &save-bundle
    save_cache:
      key: v1-bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      paths:
        - ~/.bundle
        - vendor/bundle

  _restore-assets: &restore-assets
    restore_cache:
      keys:
        - v4-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
        # fallback to using the latest asset cache if no exact match is found
        - v4-yarn-

  _install-assets: &install-assets
    run:
      name: Install and compile assets
      command: |
        RUBYOPT=-W:no-deprecated \
        yarn install && bin/rails dartsass:build

  _save-assets: &save-assets
    save_cache:
      key: v4-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
        - app/assets/builds

  _attach-tmp-workspace: &attach-tmp-workspace
    attach_workspace:
      at: ~/repo/tmp

  _push-docker-image: &push-docker-image
    run:
      name: Tag and push images
      command: |
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:${CIRCLE_SHA1}"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:${CIRCLE_SHA1}"
          case "${CIRCLE_BRANCH}" in
            main)
              docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:latest"
              docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}:latest"
          esac

  _aws-ecr-login: &aws-ecr-login
    run: 
      name: Login to ECR
      command: |
        aws ecr get-login-password --region $ECR_REGION | docker login \
        --username AWS --password-stdin \
        ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com

  _authenticate-kubectl: &authenticate-kubectl
    run:
      name: Authenticate K8s
      command: |
          echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
          kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=${K8S_CLUSTER_URL}
          kubectl config set-credentials circleci --token=${K8S_TOKEN}
          kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
          kubectl config use-context ${K8S_CLUSTER_NAME}
          kubectl --namespace=${K8S_NAMESPACE} get pods  

# ------------------
# EXECUTORS
# ------------------  
executors:
  test-executor:
    working_directory: ~/repo
    docker:
      - image: cimg/ruby:3.2.2-browsers
        environment:
          RACK_ENV: test
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:circleci@127.0.0.1:5432/laa_assess_non_standard_magistrate_fee_test
      - image: cimg/postgres:11.21
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: laa_assess_non_standard_magistrate_fee_test

  cloud-platform-executor:
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools
        environment:
          GITHUB_TEAM_NAME_SLUG: crm7team
          REPO_NAME: laa-assess-non-standard-magistrate-fee

# ------------------
# COMMANDS
# ------------------  
commands:
  install-gems:
    steps:
      - *restore-bundle
      - *install-bundle
      - *save-bundle

  install-compile-assets:
    steps:
      - *restore-assets
      - *install-assets
      - *save-assets

  # restore-dependencies:
  #   steps:
  #     - *restore-bundle
  #     - *restore-assets

  build-base:
    steps:
      - install-gems
      - install-compile-assets
      - install-codeclimate-tt
  
  db-setup:
    steps:
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: |
            RUBYOPT=-W:no-deprecated \
            bundle exec rails db:prepare

  rubocop:
    steps:
      - run:
          name: Run rubocop
          command: bundle exec rubocop

  rspec:
    steps:
      - db-setup
      - run:
          name: Run rspec tests
          command: |
            mkdir /tmp/test-results
            tmp/cc-test-reporter before-build
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
            RUBYOPT=-W:no-deprecated \
            bundle exec rspec \
             --format progress \
             --out /tmp/test-results/rspec.xml \
              $TESTFILES
            tmp/cc-test-reporter format-coverage -t simplecov -o "tmp/coverage/codeclimate.$CIRCLE_NODE_INDEX.json"
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  upload-coverage:
      steps:
        - run:
            name: Upload coverage results to Code Climate
            command: |
              tmp/cc-test-reporter sum-coverage --output - tmp/coverage/codeclimate.*.json | tmp/cc-test-reporter upload-coverage --input -

  install-codeclimate-tt:
      steps:
        - run:
            name: Install codeclimate test reporter
            command: |
              mkdir -p tmp/
              mkdir -p tmp/coverage/
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > tmp/cc-test-reporter
              chmod +x tmp/cc-test-reporter
        - persist_to_workspace:
            root: tmp
            paths:
              - cc-test-reporter

  build-docker-image:
      steps:
        - run:
            name: Build docker image for app
            command: |
              docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=$(date +%Y-%m-%dT%H:%M:%S%z) \
              --build-arg APP_BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
              --build-arg APP_BUILD_TAG=${CIRCLE_SHA1} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              --build-arg APP_BRANCH_NAME=${CIRCLE_BRANCH} \
              -t app .

  deploy-to-environment:
      description: Deploy image to the specified environment
      parameters:
        environment:
          description: Name of environment to deploy to
          type: string
      steps:
        - checkout
        - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
        - *aws-ecr-login
        - *authenticate-kubectl
        - run:
            name: Deploy to namespace
            command: |
                helm upgrade laa-assess-non-standard-magistrate-fee \
                  ./helm_deploy/. \
                    --install --wait --force \
                    --namespace=${K8S_NAMESPACE} \
                    --values ./helm_deploy/values-<< parameters.environment >>.yaml \
                    --set image.repository="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPO_NAME}" \
                    --set image.tag="${CIRCLE_SHA1}" \
                    --atomic

# ------------------
# JOBS
# ------------------      
jobs:
  build-test-container:
    executor: test-executor
    steps:
      - checkout
      - build-base
  
  linter-tests:
    executor: test-executor
    steps:
      - checkout
      - install-gems
      - rubocop
  
  rspec-tests:
    executor: test-executor
    parallelism: 4
    steps:
      - checkout
      - install-gems
      - *attach-tmp-workspace
      - browser-tools/install-browser-tools
      - rspec
      - persist_to_workspace:
          root: tmp
          paths:
            - coverage/codeclimate.*.json
      - store_artifacts:
          path: tmp/coverage

  upload-test-coverage:
    executor: test-executor
    steps:
      - *attach-tmp-workspace
      - upload-coverage

  build-to-ecr:
    executor: aws-ecr/default
    steps:
      - checkout 
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - *aws-ecr-login
      - aws-ecr/build-image:
          tag: ${CIRCLE_SHA1}
          region: $ECR_REGION
          repo: $ECR_REPOSITORY 
  
  deploy-dev:
    executor: cloud-platform-executor
    steps:
      - deploy-to-environment:
          environment: dev

# ------------------
# WORKFLOWS
# ------------------
workflows:
  test:
    jobs:
      - build-test-container:
          filters:
            branches:
              ignore:
                - main
      - linter-tests:
          requires:
            - build-test-container
      - rspec-tests:
          requires:
            - build-test-container
      - upload-test-coverage:
          requires:
            - rspec-tests

  build-push-branch:
    jobs:
      - build-to-ecr:
          context: laa-assess-non-standard-magistrates-fee-dev
      - hold-dev:
          type: approval
          requires:
            - build-push-to-ecr
      - deploy-dev:
          context: laa-assess-non-standard-magistrates-fee
          requires:
            - hold-dev